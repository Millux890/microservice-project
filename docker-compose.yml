version: '3'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - mynetwork

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://192.168.0.217:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - mynetwork

  magic:
    image: "digitsy/kafka-magic"
    ports:
      - "3030:80"
    volumes:
      - .:/config
    environment:
      KMAGIC_ALLOW_TOPIC_DELETE: "true"
      KMAGIC_ALLOW_SCHEMA_DELETE: "true"
      KMAGIC_CONFIG_STORE_TYPE: "file"
      KMAGIC_CONFIG_STORE_CONNECTION: "Data Source=/config/KafkaMagicConfig.db;"
      KMAGIC_CONFIG_ENCRYPTION_KEY: "123"
      KMAGIC_KAFKA_BOOTSTRAP_SERVERS: "http://192.168.0.217:9092"
      KMAGIC_SCHEMA_REGISTRY_URL: "http://192.168.0.217:8024"
    depends_on:
      - kafka
    networks:
      - mynetwork

  mongo:
    container_name: mongo
    image: mongo:4.4.14-rc0-focal
    restart: always
    ports:
      - "27017:27017"
    expose:
      - "27017"
    volumes:
      - ./mongo-data:/data/db
    networks:
      - mynetwork

  postgres-microservice-project:
    image: postgres:latest
    container_name: postgres-microservice-project
    environment:
      POSTGRES_DB: microservice-project
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - mynetwork

  postgres-keycloak:
    image: postgres:latest
    container_name: postgres-keycloak
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - mynetwork

  keycloak:
    image: quay.io/keycloak/keycloak:25.0.2
    command: [ "start-dev", "--import-realm" ]
    container_name: microservice-project-keycloak
    restart: unless-stopped
    environment:
      KC_DB: postgres
      KC_DB_USERNAME: admin
      KC_DB_PASSWORD: admin
      KC_DB_URL: "jdbc:postgresql://postgres-keycloak:5432/keycloak"
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8181:8080"
    volumes:
      - ./keycloak/realm.json:/opt/keycloak/data/import/realm.json:ro
    depends_on:
      - postgres-keycloak
    networks:
      - mynetwork

  ## Eureka Server
  discovery-server:
    image: discovery-server:latest
    container_name: discovery-server
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - eureka.client.serviceUrl.defaultZone=http://192.168.0.217:8761/eureka/
    networks:
      - mynetwork

  api-gateway:
    image: api-gateway:latest
    container_name: api-gateway
    ports:
      - "8015:8015"
    hostname: 192.168.0.217
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:password@192.168.0.217:8761/eureka
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI=http://192.168.0.217:8181/realms/spring-boot-microservices-realm

    depends_on:
#      - discovery-server
      - keycloak
    networks:
      - mynetwork

  ## Product-Service Docker Compose Config
  product-service:
    container_name: product-service
    image: product-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:password@192.168.0.217:8761/eureka
      - SPRING_DATA_MONGODB_URI=mongodb://192.168.0.217:27017/product-service
    depends_on:
      - mongo
#      - discovery-server
      - api-gateway
    networks:
      - mynetwork

  ## Order-Service Docker Compose Config
  order-service:
    ports:
      - "8012:8012"
    container_name: order-service
    image: order-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:password@192.168.0.217:8761/eureka
      - SPRING_DATA_MONGODB_URI=mongodb://192.168.0.217:27017/product-service
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=192.168.0.217:9092
    depends_on:
      - api-gateway
#      - mongo
#      - kafka
#      - discovery-server
    networks:
      - mynetwork

  ## Notification-Service Docker Compose Config
  notification-service:
    container_name: notification-service
    image: notification-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:password@192.168.0.217:8761/eureka
      - SPRING_DATA_MONGODB_URI=mongodb://192.168.0.217:27017/product-service
      - SPRING_JACKSON_DESERIALIZATION_FAIL_ON_UNKNOWN_PROPERTIES=true
    depends_on:
      - kafka
      - discovery-server
      - api-gateway

volumes:
  postgres_data:

networks:
  mynetwork:
    driver: bridge
